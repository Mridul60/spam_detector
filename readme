# üìß Spam Message Detector üîç

A client-side Machine Learning web application to detect whether a message is **Spam** or **Not Spam** (Ham), built entirely with **React** and **JavaScript** using a pre-trained model that runs directly in your browser.

## üöÄ Live Demo

**üåê [View Live Demo](https://spam-detector-4h4t.onrender.com) **


## ‚ú® Features

- **Real-time Spam Detection**: Instantly classify messages as spam or legitimate
- **Client-Side Processing**: No server required - runs entirely in the browser  
- **Privacy Focused**: Your messages never leave your device
- **Lightning Fast**: Instant results with no network delays
- **Machine Learning Powered**: Uses pre-trained model for accurate predictions
- **Mobile Responsive**: Works seamlessly across all devices
- **Offline Capable**: Works without internet connection once loaded
- **Clean React UI**: Modern, intuitive interface

## üß† Model Overview

- **Algorithm:** Pre-trained classification model
- **Dataset:** Based on SMS Spam Collection Dataset  
- **Processing:** Client-side text analysis and classification
- **Language:** JavaScript/React  
- **Accuracy:** High accuracy spam detection
- **Model Size:** Lightweight and optimized for web

## üõ†Ô∏è Tech Stack

### Frontend
- ‚öõÔ∏è **React.js** - UI library for building interactive interfaces
- üé® **CSS3** - Modern styling and responsive design
- üì± **JavaScript/ES6+** - Modern JavaScript features
- üß† **Client-side ML** - Browser-based machine learning
- ‚ö° **Create React App** - Development and build tooling

### Assets & Resources
- üñºÔ∏è **Logo files** - Custom branding (logo192.png, logo512.png, logo.svg)
- üìÑ **Manifest.json** - PWA configuration

### Development Tools
- üì¶ **npm/yarn** - Package management
- üß™ **Jest** - Testing framework
- üìä **Web Vitals** - Performance monitoring
- üîß **ESLint** - Code quality

### Deployment
- **Vercel/Netlify** - Static site deployment
- **GitHub Pages** - Alternative deployment option

## üìÇ Project Structure

```
SPAM_DETECTOR/
‚îú‚îÄ‚îÄ Dataset/
‚îÇ   ‚îî‚îÄ‚îÄ smsspamcollection.zip    # Original dataset (for reference)
‚îú‚îÄ‚îÄ spam-backend/                # (Not used - legacy folder)
‚îÇ   ‚îú‚îÄ‚îÄ app.py
‚îÇ   ‚îú‚îÄ‚îÄ explore_data.py
‚îÇ   ‚îú‚îÄ‚îÄ preprocess.py
‚îÇ   ‚îú‚îÄ‚îÄ train_model.py
‚îÇ   ‚îú‚îÄ‚îÄ spam_model.pkl
‚îÇ   ‚îú‚îÄ‚îÄ vectorizer.pkl
‚îÇ   ‚îú‚îÄ‚îÄ requirements.txt
‚îÇ   ‚îî‚îÄ‚îÄ SMSSpamCollection
‚îú‚îÄ‚îÄ spam-frontend/               # Main React Application
‚îÇ   ‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ favicon.ico
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.html          # Main HTML template
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ logo192.png         # App icons
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ logo512.png
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ manifest.json       # PWA manifest
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ robots.txt
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ App.css            # Main app styles
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ App.js             # Main React component
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ App.test.js        # App tests
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.css          # Global styles
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.js           # React entry point
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ logo.svg           # Logo component
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ reportWebVitals.js # Performance monitoring
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ setupTests.js      # Test configuration
‚îÇ   ‚îú‚îÄ‚îÄ .env.local             # Local environment variables
‚îÇ   ‚îú‚îÄ‚îÄ .env.production        # Production environment variables
‚îÇ   ‚îú‚îÄ‚îÄ .gitignore
‚îÇ   ‚îú‚îÄ‚îÄ package.json           # Dependencies and scripts
‚îÇ   ‚îú‚îÄ‚îÄ package-lock.json
‚îÇ   ‚îî‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ venv/                       # Python virtual environment (unused)
‚îú‚îÄ‚îÄ .gitignore
‚îî‚îÄ‚îÄ readme                     # Project documentation
```

## üöÄ Quick Start

### Prerequisites

- **Node.js** (v16 or higher)
- **npm** or **yarn**
- **Git**

### Installation & Setup

1. **Clone the repository**
   ```bash
   git clone https://github.com/yourusername/spam-detector.git
   cd SPAM_DETECTOR
   ```

2. **Navigate to the React app**
   ```bash
   cd spam-frontend
   ```

3. **Install dependencies**
   ```bash
   npm install
   # or
   yarn install
   ```

4. **Start development server**
   ```bash
   npm start
   # or
   yarn start
   ```

5. **Open your browser**
   ```
   Navigate to http://localhost:3000
   ```

The app will automatically load and be ready to detect spam messages!

## üîß Environment Variables

Create environment files in the `spam-frontend` directory:

### .env.local (Development)
```env
REACT_APP_NAME=Spam Message Detector
REACT_APP_VERSION=1.0.0
GENERATE_SOURCEMAP=false
```

### .env.production (Production)
```env
REACT_APP_NAME=Spam Message Detector
REACT_APP_VERSION=1.0.0
GENERATE_SOURCEMAP=false
BUILD_PATH=build
```

## üí° How It Works

### Client-Side Processing
```javascript
// The app processes messages entirely in the browser
const detectSpam = (message) => {
  // Text preprocessing
  const cleanedText = preprocessText(message);
  
  // Feature extraction
  const features = extractFeatures(cleanedText);
  
  // Classification
  const prediction = classifyMessage(features);
  
  return prediction;
};
```

### Key Components
```javascript
// Main App component handles the spam detection logic
function App() {
  const [message, setMessage] = useState('');
  const [prediction, setPrediction] = useState(null);
  
  const handleDetection = () => {
    const result = detectSpam(message);
    setPrediction(result);
  };
  
  return (
    // UI components for input and results
  );
}
```

## üé® Customization

### Styling
Modify CSS files in the `src/` directory:
- `App.css` - Main component styles
- `index.css` - Global styles

### Branding
Replace logo files in the `public/` directory:
- `logo192.png` - 192x192 icon
- `logo512.png` - 512x512 icon  
- `favicon.ico` - Browser favicon
- Update `src/logo.svg` for the main logo

### App Configuration
Update `public/manifest.json` for PWA settings:
```json
{
  "short_name": "Spam Detector",
  "name": "Spam Message Detector",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    }
  ]
}
```

## üöÄ Build and Deploy

### Build for Production
```bash
cd spam-frontend
npm run build
# or
yarn build
```

This creates an optimized build in the `build/` directory.

### Deploy to Vercel

1. **Install Vercel CLI**
   ```bash
   npm install -g vercel
   ```

2. **Deploy from frontend directory**
   ```bash
   cd spam-frontend
   vercel --prod
   ```

### Deploy to Netlify

1. **Build the project**
   ```bash
   npm run build
   ```

2. **Deploy via Netlify CLI**
   ```bash
   npm install -g netlify-cli
   netlify deploy --prod --dir=build
   ```

### Deploy to GitHub Pages

1. **Install gh-pages**
   ```bash
   npm install --save-dev gh-pages
   ```

2. **Add deploy script to package.json**
   ```json
   {
     "scripts": {
       "predeploy": "npm run build",
       "deploy": "gh-pages -d build"
     }
   }
   ```

3. **Deploy**
   ```bash
   npm run deploy
   ```

## üß™ Testing

### Run Tests
```bash
cd spam-frontend
npm test
# or
yarn test
```

### Test Coverage
```bash
npm test -- --coverage
```

### Manual Testing Examples

**Test with these sample messages:**

**Spam Messages:**
- "Congratulations! You've won $1000! Click here now!"
- "URGENT: Your account will be suspended. Call immediately!"
- "Free ringtones! Text STOP to unsubscribe"
- "You have been selected for a free vacation! Act now!"

**Ham (Legitimate) Messages:**
- "Hey, are we still meeting for lunch today?"
- "Thanks for the help with the project!"
- "Can you pick up milk on your way home?"
- "Meeting has been moved to 3 PM tomorrow"

## ‚ö° Performance Optimization

### Bundle Analysis
```bash
npm run build
npx serve -s build
```

### Performance Tips
- The app loads instantly once cached
- No network requests needed for predictions
- Optimized bundle size for fast loading
- Uses React's built-in optimizations

### Web Vitals Monitoring
The app includes `reportWebVitals.js` for performance tracking:
```javascript
import { getCLS, getFID, getFCP, getLCP, getTTFB } from 'web-vitals';

function sendToAnalytics(metric) {
  // Send performance data to your analytics service
  console.log(metric);
}

getCLS(sendToAnalytics);
getFID(sendToAnalytics);
getFCP(sendToAnalytics);
getLCP(sendToAnalytics);
getTTFB(sendToAnalytics);
```

## üîí Privacy & Security

- **No Data Collection**: Messages are processed locally
- **No Server Communication**: Everything runs in your browser  
- **No Storage**: Messages are not saved or logged
- **Secure**: No risk of message interception
- **GDPR Compliant**: No personal data processing

## üêõ Troubleshooting

### Common Issues

**App not starting:**
```bash
# Clear node_modules and reinstall
rm -rf node_modules package-lock.json
npm install
npm start
```

**Build errors:**
```bash
# Check Node.js version
node --version  # Should be v16+

# Clear cache
npm start -- --reset-cache
```

**Performance issues:**
```bash
# Check for console errors in browser dev tools
# Verify browser compatibility
# Clear browser cache
```

## üßë‚Äçüíª Development

### Available Scripts

In the `spam-frontend` directory:

- `npm start` - Runs the app in development mode
- `npm test` - Launches the test runner
- `npm run build` - Builds the app for production
- `npm run eject` - Ejects from Create React App (irreversible)

### Code Structure
```javascript
// Main App component structure
function App() {
  // State management
  const [message, setMessage] = useState('');
  const [result, setResult] = useState(null);
  
  // Spam detection logic
  const handleDetection = () => {
    // Client-side processing logic here
  };
  
  // Render UI
  return (
    <div className="App">
      {/* Input components */}
      {/* Results display */}
    </div>
  );
}
```

## ü§ù Contributing

1. **Fork the repository**
2. **Create feature branch**: `git checkout -b feature/amazing-feature`
3. **Make changes in the `spam-frontend` directory**
4. **Test thoroughly**: `npm test`
5. **Build successfully**: `npm run build`
6. **Commit changes**: `git commit -m 'Add amazing feature'`
7. **Push to branch**: `git push origin feature/amazing-feature`
8. **Open Pull Request**

## üìö Future Improvements

- [ ] Add confidence score display
- [ ] Implement message history
- [ ] Add batch processing for multiple messages
- [ ] Create dark/light theme toggle
- [ ] Add keyboard shortcuts
- [ ] Implement PWA features (offline usage)
- [ ] Add more sophisticated text preprocessing
- [ ] Create browser extension version
- [ ] Add multiple language support
- [ ] Implement user feedback system

## üìù Scripts Overview

```json
{
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build", 
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  }
}
```

## üéØ Browser Support

- ‚úÖ Chrome 80+
- ‚úÖ Firefox 75+  
- ‚úÖ Safari 13+
- ‚úÖ Edge 80+
- ‚ö†Ô∏è Internet Explorer (not supported)

## üìä Performance Metrics

- **Bundle Size**: Optimized for fast loading
- **First Contentful Paint**: <1.5s
- **Largest Contentful Paint**: <2.5s
- **Time to Interactive**: <3s
- **Cumulative Layout Shift**: <0.1

## üìÑ License

MIT License ¬© 2025

## üêõ Issues

If you encounter any issues, please [create an issue](https://github.com/yourusername/spam-detector/issues) on GitHub.

## üßë‚Äçüíª Author

**Your Name**  
üì´ [LinkedIn](https://www.linkedin.com/in/mridul-roy-39b297)  | üêô [GitHub](https://github.com/Mridul60)

---

**Made with ‚ù§Ô∏è and React**

‚≠ê **Star this repository if you found it helpful!**

---

*A pure client-side spam detection app that prioritizes privacy and performance. Perfect for learning React development and client-side machine learning implementation.*
